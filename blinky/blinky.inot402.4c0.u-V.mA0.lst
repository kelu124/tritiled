
/tmp/arduino_build_463034/blinky.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../../crt1/gcrt1.S:63
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
../../../../../crt1/gcrt1.S:67
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:68
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:69
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:70
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:71
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:72
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:73
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:74
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:75
  12:	fe c0       	rjmp	.+508    	; 0x210 <__vector_9>
../../../../../crt1/gcrt1.S:76
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:77
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:78
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:79
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:80
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:81
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:82
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:83
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:84
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:85
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:86
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:87
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:88
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:89
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:90
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
../../../../../crt1/gcrt1.S:91
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
__trampolines_start():
../../../../../crt1/gcrt1.S:230
  34:	11 24       	eor	r1, r1
../../../../../crt1/gcrt1.S:231
  36:	1f be       	out	0x3f, r1	; 63
../../../../../crt1/gcrt1.S:232
  38:	cf ef       	ldi	r28, 0xFF	; 255
../../../../../crt1/gcrt1.S:234
  3a:	cd bf       	out	0x3d, r28	; 61
../../../../../crt1/gcrt1.S:236
  3c:	df e3       	ldi	r29, 0x3F	; 63
../../../../../crt1/gcrt1.S:237
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  40:	2f e3       	ldi	r18, 0x3F	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  42:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  44:	bf e3       	ldi	r27, 0x3F	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  4a:	aa 30       	cpi	r26, 0x0A	; 10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  4c:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../../crt1/gcrt1.S:314
  50:	3a d1       	rcall	.+628    	; 0x2c6 <main>
../../../../../crt1/gcrt1.S:315
  52:	b4 c1       	rjmp	.+872    	; 0x3bc <_exit>

00000054 <__bad_interrupt>:
__vector_22():
../../../../../crt1/gcrt1.S:209
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <digitalWrite.part.1>:
digitalWrite.part.1():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:154
  }
}

void digitalWrite(uint8_t pin, uint8_t val) {
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	fc 01       	movw	r30, r24
  5a:	ee 52       	subi	r30, 0x2E	; 46
  5c:	fc 47       	sbci	r31, 0x7C	; 124
  5e:	50 81       	ld	r21, Z
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:155
  if (bit_mask == NOT_A_PIN) {
  60:	5f 3f       	cpi	r21, 0xFF	; 255
  62:	09 f4       	brne	.+2      	; 0x66 <digitalWrite.part.1+0x10>
  64:	44 c0       	rjmp	.+136    	; 0xee <__EEPROM_REGION_LENGTH__+0x6e>
turnOffPWM():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:95
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t pin) {
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
  66:	fc 01       	movw	r30, r24
  68:	e0 54       	subi	r30, 0x40	; 64
  6a:	fc 47       	sbci	r31, 0x7C	; 124
  6c:	20 81       	ld	r18, Z
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:96
  if (timer == NOT_ON_TIMER) {
  6e:	22 23       	and	r18, r18
  70:	b9 f0       	breq	.+46     	; 0xa0 <__EEPROM_REGION_LENGTH__+0x20>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:103
  }

  uint8_t bit_pos = digitalPinToBitPosition(pin);
  //TCB_t *timerB;

  switch (timer) {
  72:	20 31       	cpi	r18, 0x10	; 16
  74:	a9 f4       	brne	.+42     	; 0xa0 <__EEPROM_REGION_LENGTH__+0x20>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:100
  uint8_t timer = digitalPinToTimer(pin);
  if (timer == NOT_ON_TIMER) {
    return;
  }

  uint8_t bit_pos = digitalPinToBitPosition(pin);
  76:	fc 01       	movw	r30, r24
  78:	ea 53       	subi	r30, 0x3A	; 58
  7a:	fc 47       	sbci	r31, 0x7C	; 124
  7c:	40 81       	ld	r20, Z
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:109

    /* TCA0 */
    case TIMERA0:
      /* Bit position will give output channel */
      #ifdef __AVR_ATtinyxy2__
      if (bit_pos == 7) {
  7e:	47 30       	cpi	r20, 0x07	; 7
  80:	f9 f0       	breq	.+62     	; 0xc0 <__EEPROM_REGION_LENGTH__+0x40>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:113
        bit_pos = 0;  //on the xy2, WO0 is on PA7
      }
      #endif
      if (bit_pos > 2) {
  82:	43 30       	cpi	r20, 0x03	; 3
  84:	08 f0       	brcs	.+2      	; 0x88 <__EEPROM_REGION_LENGTH__+0x8>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:114
        bit_pos++;  //there's a blank bit in the middle
  86:	4f 5f       	subi	r20, 0xFF	; 255
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:117
      }
      /* Disable corresponding channel */
      TCA0.SPLIT.CTRLB &= ~(1 << (TCA_SPLIT_LCMP0EN_bp + bit_pos));
  88:	70 91 01 0a 	lds	r23, 0x0A01	; 0x800a01 <digital_pin_to_bit_mask+0x7f862f>
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <__EEPROM_REGION_LENGTH__+0x14>
  92:	22 0f       	add	r18, r18
  94:	4a 95       	dec	r20
  96:	ea f7       	brpl	.-6      	; 0x92 <__EEPROM_REGION_LENGTH__+0x12>
  98:	20 95       	com	r18
  9a:	27 23       	and	r18, r23
  9c:	20 93 01 0a 	sts	0x0A01, r18	; 0x800a01 <digital_pin_to_bit_mask+0x7f862f>
digitalWrite.part.1():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:168
  turnOffPWM(pin);

  /* Assuming the direction is already output !! */

  /* Get port */
  PORT_t *port = digitalPinToPortStruct(pin);
  a0:	fc 01       	movw	r30, r24
  a2:	e4 53       	subi	r30, 0x34	; 52
  a4:	fc 47       	sbci	r31, 0x7C	; 124
  a6:	e0 81       	ld	r30, Z
  a8:	20 e2       	ldi	r18, 0x20	; 32
  aa:	e2 9f       	mul	r30, r18
  ac:	f0 01       	movw	r30, r0
  ae:	11 24       	eor	r1, r1
  b0:	fc 5f       	subi	r31, 0xFC	; 252
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:171

  /* Output direction */
  if (port->DIR & bit_mask) {
  b2:	20 81       	ld	r18, Z
  b4:	25 23       	and	r18, r21
  b6:	41 f0       	breq	.+16     	; 0xc8 <__EEPROM_REGION_LENGTH__+0x48>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:174

    /* Set output to value */
    if (val == LOW) { /* If LOW */
  b8:	61 11       	cpse	r22, r1
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__EEPROM_REGION_LENGTH__+0x44>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:175
      port->OUTCLR = bit_mask;
  bc:	56 83       	std	Z+6, r21	; 0x06
  be:	08 95       	ret
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:110
    /* TCA0 */
    case TIMERA0:
      /* Bit position will give output channel */
      #ifdef __AVR_ATtinyxy2__
      if (bit_pos == 7) {
        bit_pos = 0;  //on the xy2, WO0 is on PA7
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	e2 cf       	rjmp	.-60     	; 0x88 <__EEPROM_REGION_LENGTH__+0x8>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:181

    } else if (val == CHANGE) { /* If TOGGLE */
      port->OUTTGL = bit_mask;
      /* If HIGH OR  > TOGGLE  */
    } else {
      port->OUTSET = bit_mask;
  c4:	55 83       	std	Z+5, r21	; 0x05
  c6:	08 95       	ret
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:192
      pull up is enabled if this function is called.
      Should we purposely implement this side effect?
    */

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
  c8:	8a 53       	subi	r24, 0x3A	; 58
  ca:	9c 47       	sbci	r25, 0x7C	; 124
  cc:	dc 01       	movw	r26, r24
  ce:	8c 91       	ld	r24, X
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:195

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
  d0:	30 97       	sbiw	r30, 0x00	; 0
  d2:	71 f0       	breq	.+28     	; 0xf0 <__EEPROM_REGION_LENGTH__+0x70>
  d4:	8f 3f       	cpi	r24, 0xFF	; 255
  d6:	61 f0       	breq	.+24     	; 0xf0 <__EEPROM_REGION_LENGTH__+0x70>
  d8:	70 96       	adiw	r30, 0x10	; 16
  da:	e8 0f       	add	r30, r24
  dc:	f1 1d       	adc	r31, r1
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:198

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
  de:	9f b7       	in	r25, 0x3f	; 63
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:199
    cli();
  e0:	f8 94       	cli
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:203

    if (val == LOW) {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
  e2:	80 81       	ld	r24, Z
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:201

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    cli();

    if (val == LOW) {
  e4:	61 11       	cpse	r22, r1
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <__EEPROM_REGION_LENGTH__+0x76>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:203
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
  e8:	87 7f       	andi	r24, 0xF7	; 247
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:207

    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
  ea:	80 83       	st	Z, r24
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:211
    }

    /* Restore system status */
    SREG = status;
  ec:	9f bf       	out	0x3f, r25	; 63
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:214
  }

}
  ee:	08 95       	ret
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:195

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f4 cf       	rjmp	.-24     	; 0xde <__EEPROM_REGION_LENGTH__+0x5e>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:207
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;

    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	f8 cf       	rjmp	.-16     	; 0xea <__EEPROM_REGION_LENGTH__+0x6a>

000000fa <pinMode.part.0>:
pinMode.part.0():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"


void pinMode(uint8_t pin, uint8_t mode) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:31
  uint8_t bit_mask = digitalPinToBitMask(pin);
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	ee 52       	subi	r30, 0x2E	; 46
 104:	fc 47       	sbci	r31, 0x7C	; 124
 106:	20 81       	ld	r18, Z
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:33

  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
 108:	2f 3f       	cpi	r18, 0xFF	; 255
 10a:	61 f0       	breq	.+24     	; 0x124 <__DATA_REGION_LENGTH__+0x24>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:37
    return;
  }

  PORT_t *port = digitalPinToPortStruct(pin);
 10c:	fc 01       	movw	r30, r24
 10e:	e4 53       	subi	r30, 0x34	; 52
 110:	fc 47       	sbci	r31, 0x7C	; 124
 112:	e0 81       	ld	r30, Z
 114:	30 e2       	ldi	r19, 0x20	; 32
 116:	e3 9f       	mul	r30, r19
 118:	f0 01       	movw	r30, r0
 11a:	11 24       	eor	r1, r1
 11c:	fc 5f       	subi	r31, 0xFC	; 252
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:42
  if (port == NULL) {
    return;
  }

  if (mode == OUTPUT) {
 11e:	61 30       	cpi	r22, 0x01	; 1
 120:	21 f4       	brne	.+8      	; 0x12a <__DATA_REGION_LENGTH__+0x2a>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:45

    /* Configure direction as output */
    port->DIRSET = bit_mask;
 122:	21 83       	std	Z+1, r18	; 0x01
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:49
    /* Configure direction as output */
    port->DIRSET = bit_mask;

  } else { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
 12a:	8a 53       	subi	r24, 0x3A	; 58
 12c:	9c 47       	sbci	r25, 0x7C	; 124
 12e:	ec 01       	movw	r28, r24
 130:	a8 81       	ld	r26, Y
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:51
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
 132:	af 3f       	cpi	r26, 0xFF	; 255
 134:	69 f0       	breq	.+26     	; 0x150 <__DATA_REGION_LENGTH__+0x50>
 136:	cf 01       	movw	r24, r30
 138:	40 96       	adiw	r24, 0x10	; 16
 13a:	a8 0f       	add	r26, r24
 13c:	b9 2f       	mov	r27, r25
 13e:	b1 1d       	adc	r27, r1
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:54

    /* Save state */
    uint8_t status = SREG;
 140:	9f b7       	in	r25, 0x3f	; 63
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:55
    cli();
 142:	f8 94       	cli
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:58

    /* Configure direction as input */
    port->DIRCLR = bit_mask;
 144:	22 83       	std	Z+2, r18	; 0x02
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:64

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP) {

      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
 146:	8c 91       	ld	r24, X
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	8c 93       	st	X, r24
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:73
      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
    }

    /* Restore state */
    SREG = status;
 14c:	9f bf       	out	0x3f, r25	; 63
 14e:	ea cf       	rjmp	.-44     	; 0x124 <__DATA_REGION_LENGTH__+0x24>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring_digital.c:51

  } else { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	f5 cf       	rjmp	.-22     	; 0x140 <__DATA_REGION_LENGTH__+0x40>

00000156 <micros>:
micros():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:181
  return m;
}

#ifndef MILLIS_USE_TIMERRTC

unsigned long micros() {
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:192
  #else
  uint8_t ticks;
  #endif

  /* Save current state and disable interrupts */
  uint8_t status = SREG;
 15a:	9f b7       	in	r25, 0x3f	; 63
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:193
  cli();
 15c:	f8 94       	cli
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:199



  /* Get current number of overflows and timer count */
  #if !(defined(MILLIS_USE_TIMERB0)  || defined(MILLIS_USE_TIMERB1) )
  overflows = timer_overflow_count;
 15e:	20 91 06 3f 	lds	r18, 0x3F06	; 0x803f06 <timer_overflow_count>
 162:	30 91 07 3f 	lds	r19, 0x3F07	; 0x803f07 <timer_overflow_count+0x1>
 166:	40 91 08 3f 	lds	r20, 0x3F08	; 0x803f08 <timer_overflow_count+0x2>
 16a:	50 91 09 3f 	lds	r21, 0x3F09	; 0x803f09 <timer_overflow_count+0x3>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:205
  #else
  overflows = timer_millis;
  #endif

  #if defined(MILLIS_USE_TIMERA0)
  ticks = (TIME_TRACKING_TIMER_PERIOD) - TCA0.SPLIT.HCNT;
 16e:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <digital_pin_to_bit_mask+0x7f864f>
 172:	ee ef       	ldi	r30, 0xFE	; 254
 174:	e6 1b       	sub	r30, r22
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:220
    so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it doesn't matter
  */
  #if defined(MILLIS_USE_TIMERD0)
  if ((TCD0.INTFLAGS & TCD_OVF_bm) && !(ticks & 0xFF00)) {
  #elif defined(MILLIS_USE_TIMERA0)
  if ((TCA0.SPLIT.INTFLAGS & TCA_SPLIT_HUNF_bm) && !(ticks & 0x80)) {
 176:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <digital_pin_to_bit_mask+0x7f8639>
 17a:	81 ff       	sbrs	r24, 1
 17c:	06 c0       	rjmp	.+12     	; 0x18a <micros+0x34>
 17e:	e7 fd       	sbrc	r30, 7
 180:	04 c0       	rjmp	.+8      	; 0x18a <micros+0x34>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:227
  if ((_timer->INTFLAGS & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
  #endif
    #if ((defined(MILLIS_USE_TIMERB0)|defined(MILLIS_USE_TIMERB1))&&(F_CPU>1000000))
    overflows++;
    #else
    overflows += 2;
 182:	2e 5f       	subi	r18, 0xFE	; 254
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	4f 4f       	sbci	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:234
  }

  //end getting ticks

  /* Restore state */
  SREG = status;
 18a:	9f bf       	out	0x3f, r25	; 63
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:279
                 + (ticks * 3 + (ticks >> 2) - (ticks >> 4));
  #else
  #if (TIME_TRACKING_TIMER_DIVIDER%(F_CPU/1000000))
#warning "Millis timer (TCA0) divider and frequency unsupported, inaccurate micros times will be returned."
  #endif
  microseconds = ((overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
 18c:	ac ef       	ldi	r26, 0xFC	; 252
 18e:	b3 e0       	ldi	r27, 0x03	; 3
 190:	ff d0       	rcall	.+510    	; 0x390 <__muluhisi3>
 192:	ab 01       	movw	r20, r22
 194:	bc 01       	movw	r22, r24
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:280
                  + (ticks * (clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
 196:	8e 2f       	mov	r24, r30
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	a0 e0       	ldi	r26, 0x00	; 0
 19e:	22 e0       	ldi	r18, 0x02	; 2
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	aa 1f       	adc	r26, r26
 1a6:	bb 1f       	adc	r27, r27
 1a8:	2a 95       	dec	r18
 1aa:	d1 f7       	brne	.-12     	; 0x1a0 <micros+0x4a>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:279
                 + (ticks * 3 + (ticks >> 2) - (ticks >> 4));
  #else
  #if (TIME_TRACKING_TIMER_DIVIDER%(F_CPU/1000000))
#warning "Millis timer (TCA0) divider and frequency unsupported, inaccurate micros times will be returned."
  #endif
  microseconds = ((overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
 1ac:	8a 01       	movw	r16, r20
 1ae:	9b 01       	movw	r18, r22
 1b0:	08 0f       	add	r16, r24
 1b2:	19 1f       	adc	r17, r25
 1b4:	2a 1f       	adc	r18, r26
 1b6:	3b 1f       	adc	r19, r27
 1b8:	c9 01       	movw	r24, r18
 1ba:	b8 01       	movw	r22, r16
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:284
                  + (ticks * (clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
  #endif
  #endif //end of timer-specific part of micros calculations
  return microseconds;
}
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <delay.constprop.0>:
delay.constprop.0():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:291


#endif //end of non-MILLIS_USE_TIMERNONE code

#if !(defined(MILLIS_USE_TIMERNONE) || defined(MILLIS_USE_TIMERRTC)) //delay implementation when we do have micros()
void delay(unsigned long ms) {
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:292
  uint32_t start_time = micros(), delay_time = 1000 * ms;
 1ca:	c5 df       	rcall	.-118    	; 0x156 <micros>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:295

  /* Calculate future time to return */
  uint32_t return_time = start_time + delay_time;
 1cc:	6b 01       	movw	r12, r22
 1ce:	7c 01       	movw	r14, r24
 1d0:	20 e2       	ldi	r18, 0x20	; 32
 1d2:	c2 0e       	add	r12, r18
 1d4:	21 ea       	ldi	r18, 0xA1	; 161
 1d6:	d2 1e       	adc	r13, r18
 1d8:	27 e0       	ldi	r18, 0x07	; 7
 1da:	e2 1e       	adc	r14, r18
 1dc:	f1 1c       	adc	r15, r1
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:298

  /* If return time overflows */
  if (return_time < delay_time) {
 1de:	80 e2       	ldi	r24, 0x20	; 32
 1e0:	c8 16       	cp	r12, r24
 1e2:	81 ea       	ldi	r24, 0xA1	; 161
 1e4:	d8 06       	cpc	r13, r24
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	e8 06       	cpc	r14, r24
 1ea:	f1 04       	cpc	r15, r1
 1ec:	30 f4       	brcc	.+12     	; 0x1fa <delay.constprop.0+0x38>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:300
    /* Wait until micros overflows */
    while (micros() > return_time);
 1ee:	b3 df       	rcall	.-154    	; 0x156 <micros>
 1f0:	c6 16       	cp	r12, r22
 1f2:	d7 06       	cpc	r13, r23
 1f4:	e8 06       	cpc	r14, r24
 1f6:	f9 06       	cpc	r15, r25
 1f8:	d0 f3       	brcs	.-12     	; 0x1ee <delay.constprop.0+0x2c>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:304
  }

  /* Wait until return time */
  while (micros() < return_time);
 1fa:	ad df       	rcall	.-166    	; 0x156 <micros>
 1fc:	6c 15       	cp	r22, r12
 1fe:	7d 05       	cpc	r23, r13
 200:	8e 05       	cpc	r24, r14
 202:	9f 05       	cpc	r25, r15
 204:	d0 f3       	brcs	.-12     	; 0x1fa <delay.constprop.0+0x38>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:305
}
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	cf 90       	pop	r12
 20e:	08 95       	ret

00000210 <__vector_9>:
__vector_9():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:115
#elif defined(MILLIS_USE_TIMERB1)
  ISR(TCB1_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:127
  #else
  timer_millis += 2;
  #endif
  #else
  #if !defined(MILLIS_USE_TIMERRTC) //TCA0 or TCD0
  uint32_t m = timer_millis;
 22c:	80 91 02 3f 	lds	r24, 0x3F02	; 0x803f02 <timer_millis>
 230:	90 91 03 3f 	lds	r25, 0x3F03	; 0x803f03 <timer_millis+0x1>
 234:	a0 91 04 3f 	lds	r26, 0x3F04	; 0x803f04 <timer_millis+0x2>
 238:	b0 91 05 3f 	lds	r27, 0x3F05	; 0x803f05 <timer_millis+0x3>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:128
  uint16_t f = timer_fract;
 23c:	40 91 00 3f 	lds	r20, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
 240:	50 91 01 3f 	lds	r21, 0x3F01	; 0x803f01 <__DATA_REGION_ORIGIN__+0x1>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:130
  m += MILLIS_INC;
  f += FRACT_INC;
 244:	9a 01       	movw	r18, r20
 246:	2c 5e       	subi	r18, 0xEC	; 236
 248:	3f 4f       	sbci	r19, 0xFF	; 255
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:131
  if (f >= FRACT_MAX) {
 24a:	28 3e       	cpi	r18, 0xE8	; 232
 24c:	63 e0       	ldi	r22, 0x03	; 3
 24e:	36 07       	cpc	r19, r22
 250:	98 f5       	brcc	.+102    	; 0x2b8 <__vector_9+0xa8>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:129
  #endif
  #else
  #if !defined(MILLIS_USE_TIMERRTC) //TCA0 or TCD0
  uint32_t m = timer_millis;
  uint16_t f = timer_fract;
  m += MILLIS_INC;
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	a1 1d       	adc	r26, r1
 256:	b1 1d       	adc	r27, r1
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:136
  if (f >= FRACT_MAX) {

    f -= FRACT_MAX;
    m += 1;
  }
  timer_fract = f;
 258:	20 93 00 3f 	sts	0x3F00, r18	; 0x803f00 <__DATA_REGION_ORIGIN__>
 25c:	30 93 01 3f 	sts	0x3F01, r19	; 0x803f01 <__DATA_REGION_ORIGIN__+0x1>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:137
  timer_millis = m;
 260:	80 93 02 3f 	sts	0x3F02, r24	; 0x803f02 <timer_millis>
 264:	90 93 03 3f 	sts	0x3F03, r25	; 0x803f03 <timer_millis+0x1>
 268:	a0 93 04 3f 	sts	0x3F04, r26	; 0x803f04 <timer_millis+0x2>
 26c:	b0 93 05 3f 	sts	0x3F05, r27	; 0x803f05 <timer_millis+0x3>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:140
  #endif
  //if RTC is used as timer, we only increment the overflow count
  timer_overflow_count++;
 270:	80 91 06 3f 	lds	r24, 0x3F06	; 0x803f06 <timer_overflow_count>
 274:	90 91 07 3f 	lds	r25, 0x3F07	; 0x803f07 <timer_overflow_count+0x1>
 278:	a0 91 08 3f 	lds	r26, 0x3F08	; 0x803f08 <timer_overflow_count+0x2>
 27c:	b0 91 09 3f 	lds	r27, 0x3F09	; 0x803f09 <timer_overflow_count+0x3>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	a1 1d       	adc	r26, r1
 284:	b1 1d       	adc	r27, r1
 286:	80 93 06 3f 	sts	0x3F06, r24	; 0x803f06 <timer_overflow_count>
 28a:	90 93 07 3f 	sts	0x3F07, r25	; 0x803f07 <timer_overflow_count+0x1>
 28e:	a0 93 08 3f 	sts	0x3F08, r26	; 0x803f08 <timer_overflow_count+0x2>
 292:	b0 93 09 3f 	sts	0x3F09, r27	; 0x803f09 <timer_overflow_count+0x3>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:144
  #endif
  /* Clear flag */
  #if defined(MILLIS_USE_TIMERA0)
  TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm;
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <digital_pin_to_bit_mask+0x7f8639>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:152
  #elif defined(MILLIS_USE_TIMERRTC)
  RTC.INTFLAGS = RTC_OVF_bm;
  #else //timerb
  _timer->INTFLAGS = TCB_CAPT_bm;
  #endif
}
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:133
  uint16_t f = timer_fract;
  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {

    f -= FRACT_MAX;
 2b8:	9a 01       	movw	r18, r20
 2ba:	24 5d       	subi	r18, 0xD4	; 212
 2bc:	33 40       	sbci	r19, 0x03	; 3
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:134
    m += 1;
 2be:	02 96       	adiw	r24, 0x02	; 2
 2c0:	a1 1d       	adc	r26, r1
 2c2:	b1 1d       	adc	r27, r1
 2c4:	c9 cf       	rjmp	.-110    	; 0x258 <__vector_9+0x48>

000002c6 <main>:
main():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:575
  /* Clock DIV4 */
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));

  #elif (F_CPU == 4000000) //16MHz prescaled by 4
  /* Clock DIV4 */
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));
 2c6:	88 ed       	ldi	r24, 0xD8	; 216
 2c8:	93 e0       	ldi	r25, 0x03	; 3
 2ca:	84 bf       	out	0x34, r24	; 52
 2cc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <digital_pin_to_bit_mask+0x7f7c8f>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:613
  #if F_CPU >= 12000000 // 16 MHz / 16 = 1 MHz,  20 MHz / 16 = 1.25 MHz
  ADC0.CTRLC = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;;
  #elif F_CPU >= 6000000 // 8 MHz / 8 = 1 MHz, 10 MHz / 64 = 1.25 MHz
  ADC0.CTRLC = ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;;
  #elif F_CPU >= 3000000 // 4 MHz / 32 = 1 MHz, 5 MHz / 32 = 1.25 MHz
  ADC0.CTRLC = ADC_PRESC_DIV4_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;;
 2d0:	81 e5       	ldi	r24, 0x51	; 81
 2d2:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <digital_pin_to_bit_mask+0x7f8230>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:617
  #else  // 1 MHz / 2 = 500 kHz - the lowest setting
  ADC0.CTRLC = ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;;
  #endif
  ADC0.SAMPCTRL = 14; //16 ADC clock sampling time - should be about the same amount of *time* as originally?
 2d6:	8e e0       	ldi	r24, 0x0E	; 14
 2d8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <digital_pin_to_bit_mask+0x7f8233>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:634
  ADC0.CTRLC = ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;;
  #else // 128 kHz / 2 = 64 kHz -> This is the closest you can get, the prescaler is 2
  ADC0.CTRLC = ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;;
  #endif
  #endif
  ADC0.CTRLD = ADC_INITDLY_DLY16_gc;
 2dc:	80 e2       	ldi	r24, 0x20	; 32
 2de:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <digital_pin_to_bit_mask+0x7f8231>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:636
  /* Enable ADC */
  ADC0.CTRLA |= ADC_ENABLE_bm;
 2e2:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <digital_pin_to_bit_mask+0x7f822e>
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <digital_pin_to_bit_mask+0x7f822e>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:640
  #endif

  #ifdef __AVR_ATtinyxy2__
  PORTMUX.CTRLC = 1; //move WO0 output to PA7 so PA3 can be used with WO3
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <digital_pin_to_bit_mask+0x7f7e30>
setup_timers():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:704

  /* PORTMUX setting for TCA - don't need to set because using default */
  //PORTMUX.CTRLA = PORTMUX_TCA00_DEFAULT_gc;

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
 2f2:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <digital_pin_to_bit_mask+0x7f8631>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:709

  //Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
 2f6:	8e ef       	ldi	r24, 0xFE	; 254
 2f8:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <digital_pin_to_bit_mask+0x7f8654>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:710
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
 2fc:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <digital_pin_to_bit_mask+0x7f8655>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:714

  /* Default duty 50%, will re-assign in analogWrite() */
  //TODO: replace with for loop to make this smaller;
  TCA0.SPLIT.LCMP0 = PWM_TIMER_COMPARE;
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <digital_pin_to_bit_mask+0x7f8656>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:715
  TCA0.SPLIT.LCMP1 = PWM_TIMER_COMPARE;
 306:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <digital_pin_to_bit_mask+0x7f8658>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:716
  TCA0.SPLIT.LCMP2 = PWM_TIMER_COMPARE;
 30a:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <digital_pin_to_bit_mask+0x7f865a>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:717
  TCA0.SPLIT.HCMP0 = PWM_TIMER_COMPARE;
 30e:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <digital_pin_to_bit_mask+0x7f8657>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:718
  TCA0.SPLIT.HCMP1 = PWM_TIMER_COMPARE;
 312:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <digital_pin_to_bit_mask+0x7f8659>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:719
  TCA0.SPLIT.HCMP2 = PWM_TIMER_COMPARE;
 316:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <digital_pin_to_bit_mask+0x7f865b>
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:725

  /* Use DIV64 prescaler (giving 250kHz clock), enable TCA timer */
  #if (F_CPU > 5000000) //use 64 divider
  TCA0.SPLIT.CTRLA = (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SINGLE_ENABLE_bm);
  #elif (F_CPU > 1000000)
  TCA0.SPLIT.CTRLA = (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SINGLE_ENABLE_bm);
 31a:	89 e0       	ldi	r24, 0x09	; 9
 31c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <digital_pin_to_bit_mask+0x7f862e>
init_millis():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:496
  init_millis();
}

void init_millis() {
  #if defined(MILLIS_USE_TIMERA0)
  TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
 320:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <digital_pin_to_bit_mask+0x7f8638>
 324:	82 60       	ori	r24, 0x02	; 2
 326:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <digital_pin_to_bit_mask+0x7f8638>
main():
/home/kelu/.arduino15/packages/megaTinyCore/hardware/megaavr/2.1.5/cores/megatinycore/wiring.c:650
  #ifndef MILLIS_USE_TIMERNONE
  init_millis();
  #endif //end #ifndef MILLIS_USE_TIMERNONE
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/

  sei();
 32a:	78 94       	sei
pinMode():
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	e4 de       	rcall	.-568    	; 0xfa <pinMode.part.0>
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	84 e0       	ldi	r24, 0x04	; 4
 336:	e1 de       	rcall	.-574    	; 0xfa <pinMode.part.0>
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	de de       	rcall	.-580    	; 0xfa <pinMode.part.0>
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	db de       	rcall	.-586    	; 0xfa <pinMode.part.0>
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	d8 de       	rcall	.-592    	; 0xfa <pinMode.part.0>
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	85 e0       	ldi	r24, 0x05	; 5
 34e:	d5 de       	rcall	.-598    	; 0xfa <pinMode.part.0>
setup():
/home/kelu/projets/attiny402/blinky/blinky.ino:31
  pinMode(Button, INPUT_PULLUP);
  pinMode(Lamp, INPUT_PULLUP);
  pinMode(Unused2, INPUT_PULLUP);
  pinMode(Unused3, OUTPUT);
  pinMode(Unused5, OUTPUT);
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 350:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <digital_pin_to_bit_mask+0x7f7c7e>
 354:	89 7f       	andi	r24, 0xF9	; 249
 356:	84 60       	ori	r24, 0x04	; 4
 358:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <digital_pin_to_bit_mask+0x7f7c7e>
/home/kelu/projets/attiny402/blinky/blinky.ino:32
  sleep_enable();
 35c:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <digital_pin_to_bit_mask+0x7f7c7e>
 360:	81 60       	ori	r24, 0x01	; 1
 362:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <digital_pin_to_bit_mask+0x7f7c7e>
digitalWrite():
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	75 de       	rcall	.-790    	; 0x56 <digitalWrite.part.1>
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	72 de       	rcall	.-796    	; 0x56 <digitalWrite.part.1>
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	6f de       	rcall	.-802    	; 0x56 <digitalWrite.part.1>
loop():
/home/kelu/projets/attiny402/blinky/blinky.ino:40
void loop () {

  digitalWrite(Speaker, HIGH);
  digitalWrite(Unused3, HIGH);
  digitalWrite(Unused5, HIGH);
  delay(500);
 378:	24 df       	rcall	.-440    	; 0x1c2 <delay.constprop.0>
digitalWrite():
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	6b de       	rcall	.-810    	; 0x56 <digitalWrite.part.1>
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	68 de       	rcall	.-816    	; 0x56 <digitalWrite.part.1>
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	85 e0       	ldi	r24, 0x05	; 5
 38a:	65 de       	rcall	.-822    	; 0x56 <digitalWrite.part.1>
loop():
/home/kelu/projets/attiny402/blinky/blinky.ino:44
  digitalWrite(Speaker, LOW);
  digitalWrite(Unused3, LOW);
  digitalWrite(Unused5, LOW);
  delay(500);
 38c:	1a df       	rcall	.-460    	; 0x1c2 <delay.constprop.0>
 38e:	eb cf       	rjmp	.-42     	; 0x366 <main+0xa0>

00000390 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:626
 390:	09 d0       	rcall	.+18     	; 0x3a4 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:627
 392:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:628
 394:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:629
 396:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:630
 398:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:631
 39a:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:632
 39c:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:633
 39e:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:634
 3a0:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:635
 3a2:	08 95       	ret

000003a4 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:564
 3a4:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:565
 3a6:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:566
 3a8:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:567
 3aa:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:568
 3ac:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:578
 3ae:	01 d0       	rcall	.+2      	; 0x3b2 <__umulhisi3+0xe>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:580
 3b0:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:581
 3b2:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:582
 3b4:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:583
 3b6:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:584
 3b8:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:585
 3ba:	08 95       	ret

000003bc <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 3bc:	f8 94       	cli

000003be <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avrxmega3/short-calls/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
